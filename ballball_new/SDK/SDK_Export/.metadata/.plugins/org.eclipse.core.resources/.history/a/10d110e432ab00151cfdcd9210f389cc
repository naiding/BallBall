#include "xps2.h"
#include "xtft.h"
#include "xparameters.h"
#include "ball.h"
#include "boom.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "xstatus.h"
#include "snake.h"

#define TOTAL_TEST_BYTES	18 	/* Total Number of bytes to be transmitted/received */
#define KEYBOARD_ACK		0xFA	/* ACK from keyboard */
#define printf xil_printf	   	/* A smaller footprint printf */
#define PS2_DEVICE_ID		XPAR_PS2_0_DEVICE_ID
#define TFT_DEVICE_ID	XPAR_TFT_0_DEVICE_ID
#define TFT_FRAME_ADDR0		XPAR_XPS_MCH_EMC_0_MEM0_HIGHADDR - 0x001FFFFF
#define FGCOLOR_grn		0x1c	/**< Foreground Color - Green */
#define FGCOLOR_blu		0x3
#define FGCOLOR_red		0xe0
#define FGCOLOR_blk     0x00
#define SIZE            10
static XTft TftInstance;
XTft_Config *TftConfigPtr;
int leftTopX = 40;
int leftTopY = 40;
int rightTopX = 620;
int rightTopY = 40;
int leftBottomX = 40;
int leftBottomY = 420;
int rightBottomX = 620;
int rightBottomY = 421;
char snakecolor;
char colorset[4] = { 0x1c,0x33,0xe0,0xcc};
u8 TxBuffer[TOTAL_TEST_BYTES] = {0xED, 0x00, 0xED, 0x01,
					0xED, 0x02, 0xED, 0x04,
					0xED, 0x07, 0xED, 0x06,
					0xED, 0x01, 0xED, 0x00,
					0xED, 0x07};
u8 RxBuffer;

static XPs2 Ps2Inst; 		/* Ps2 driver instance */

Boom boomboom;
Ball ball_red;
Ball ball_blue;
int speed;
int player;
void Delay(int MODE);
void paintNode(int x, int y, char color);
void paintBall(int x, int y, char color);
void paintBoom(int x, int y, char color);
void paintFrame();
void InitializeTwoBall();
void moveBall(int ball, int direction);
void moveBoom();

void chooseMenu();
void initMenu1();
void initMenu2();
void initMenu3();
void displayGameBegin();
void displayMenu();
void clearMenu();
void displayRedWin();
void displayBlueWin();

//----snake----
int mode;
int pause;
int iseatself;
int grade;
struct aNode{
	int x;
	int y;
	struct aNode* Next;
	struct aNode* Pre;
};
typedef struct aNode *Snake;
typedef Snake List;

void Insert(int x, int y,Snake P) {
	Snake TempCell;
	TempCell = malloc(sizeof(struct aNode));

	if (TempCell == NULL)
		xil_printf("Out of space");

	TempCell->x = x;
	TempCell->y = y;
	TempCell->Next = P->Next;
	P->Next->Pre = TempCell;
	TempCell->Pre = P;
	P->Next = TempCell;
}

void move(int direction, Snake L){
	Snake Head = L->Next;

	while(Head->Next != NULL) {
		Head = Head->Next;
	}

	while(Head->Pre != NULL) {
		Head->x = Head->Pre->x;
		Head->y = Head->Pre->y;
		Head = Head->Pre;
	}

	Head = L->Next;
	switch(direction) {
	case 0://right
		Head->x += 10;
		break;
	case 1://left
		Head->x -= 10;
		break;
	case 2://down
		Head->y += 10;
		break;
	case 3://up
		Head->y -= 10;
		break;
	}
}

//-------------

void getfood();
void paintfood(char foodcolor);
char snakecolor;
void paintSnakeFrame();

static XPs2 Ps2Inst; 		/* Ps2 driver instance */
int direction;

char foodcolor = FGCOLOR_red;
struct food {
	unsigned long x;
	unsigned long y;
}food;

Snake H;

void writeVGA(int num)
{
	if(num == 0)	XTft_Write(&TftInstance,'0');
	if(num == 1)	XTft_Write(&TftInstance,'1');
	if(num == 2)	XTft_Write(&TftInstance,'2');
	if(num == 3)	XTft_Write(&TftInstance,'3');
	if(num == 4)	XTft_Write(&TftInstance,'4');
	if(num == 5)	XTft_Write(&TftInstance,'5');
	if(num == 6)	XTft_Write(&TftInstance,'6');
	if(num == 7)	XTft_Write(&TftInstance,'7');
	if(num == 8)	XTft_Write(&TftInstance,'8');
	if(num == 9)	XTft_Write(&TftInstance,'9');
	return 0;
}
int abs(int num){
	if(num < 0)
		return -num;
	return num;
}
void getfood(){
	xil_printf("get food\r\n");

	food.x = 80 + (rand()%50*10);
	food.y = 80 + (rand()%27*10);

	xil_printf("x = %d,y = %d\r\n",food.x,food.y);
}
void InitialSnake() {

//	H = malloc(sizeof(struct Node));

	//³õÊ¼»¯ÊµÎï
	direction = 0;
	snakecolor = FGCOLOR_red;
	getfood();
	paintfood(foodcolor);
    H->Next = NULL;
    H->Pre = NULL;
    Insert(60,270,H);
    Insert(70,270,H);
    Insert(80,270,H);
    Insert(90,270,H);
}

void paintSnakeFrame()
{
	int i;
	for(i = 0;i < 580;i+=10){
		paintNode(i+40,40,0x3);
	}
	for(i = 0;i < 580;i+=10){
		paintNode(i+40,400,0x3);
	}
	for(i = 0;i < 360;i+=10){
		paintNode(40,i+40,0x3);
	}
	for(i = 0;i < 360;i+=10){
		paintNode(620,i+40,0x3);
	}
}

void eatfood() {

	//paintNode(food.x,food.y,snakecolor);
	Snake Temp = H->Next;

	switch(direction) {
	case 0://right
		Insert(Temp->x+10,Temp->y,H);
		break;
	case 1://left
		Insert(Temp->x-10,Temp->y,H);
		break;
	case 2://down
		Insert(Temp->x,Temp->y+10,H);
		break;
	case 3://up
		Insert(Temp->x,Temp->y-10,H);
		break;
	}
	paintNode(H->Next->x,H->Next->y,snakecolor);

}
void paintfood(char foodcolor) {
	paintNode(food.x,food.y,foodcolor);
}


void paintSnake(Snake L, char color){

	Snake N = L -> Next;
	while (N != NULL){

		paintNode(N->x, N->y, color);
		N = N->Next;
	}
}

void clearSnake(Snake L){
    Snake N = L;
    while(N->Next != NULL)
    	N = N->Next;
    paintNode(N->x, N->y,TftInstance.BgColor);

//    paintNode(N->x, N->y, TftInstance.BgColor);
}

void Delay(int MODE){
	int i;
	for(i = 0;i < 1000000 - (MODE - 1)*100000;i++);
}


int lenofs(Snake L){
	int i = 0;
	Snake aNode = L->Next;
	while(aNode != NULL){
		aNode = aNode->Next;
		i++;
	}
	return i;
}
void deletesnake(){
	Snake aNode = H->Next;
	Snake Temp = aNode;
	while(aNode != NULL) {
		Temp = aNode->Next;
		free(aNode);
		aNode = Temp;
	}
}

//-------------

int main()
{
	srand(time(0));
	int Status;
	u32 StatusReg;
	XPs2_Config *ConfigPtr;
	ConfigPtr = XPs2_LookupConfig(PS2_DEVICE_ID);
	if (ConfigPtr == NULL) {
			return XST_FAILURE;
	}
	XPs2_CfgInitialize(&Ps2Inst, ConfigPtr, ConfigPtr->BaseAddress);
	Status = XPs2_SelfTest(&Ps2Inst);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	TftConfigPtr = XTft_LookupConfig(TFT_DEVICE_ID);
	XTft_CfgInitialize(&TftInstance, TftConfigPtr,
				 	TftConfigPtr->BaseAddress);
	XTft_SetFrameBaseAddr(&TftInstance, TFT_FRAME_ADDR0);
	XTft_ClearScreen(&TftInstance);

	displayGameBegin();

	while(1) displayMenu();

	return 0;
}



void InitializeTwoBall()
{

}
//-----------------------------------init menu 3-------------------------------
void initMenu3()
{
	int stop = 1;
	speed = -20;
	player = 3;
	clearMenu();
	InitialSnake();

	paintFrame();
	mode = 2;
	int StatusReg;

	paintSnake(H, snakecolor);

	ball_red.x = (int)(leftBottomX + rightBottomX)/2;
	ball_red.y = leftBottomY - 10;
	ball_red.color = FGCOLOR_red;

	ball_blue.x = (int)(leftTopX + rightTopX)/2;
	ball_blue.y = leftTopY + 10;
	ball_blue.color = FGCOLOR_blu;

	boomboom.x = ball_red.x;
	boomboom.y = ball_red.y - 10;
	boomboom.color = 0x11;
	boomboom.direction = 1;

	paintBoom(boomboom.x, boomboom.y, boomboom.color);
	paintBall(ball_red.x, ball_red.y, ball_red.color);
	paintBall(ball_blue.x, ball_blue.y, ball_blue.color);

	XTft_SetPos(&TftInstance, 0,8);
	XTft_Write(&TftInstance, 'R');
	XTft_SetPos(&TftInstance, 15,8);
	XTft_Write(&TftInstance, 'E');
	XTft_SetPos(&TftInstance, 30,8);
	XTft_Write(&TftInstance, 'A');
	XTft_SetPos(&TftInstance, 45,8);
	XTft_Write(&TftInstance, 'D');
	XTft_SetPos(&TftInstance, 60,8);
	XTft_Write(&TftInstance, 'Y');
	int i;
	for(;;) {
		do {
			if(stop == 0){
				moveBoom();
				//
				clearSnake(H);
				move(direction, H);
				paintNode(H->Next->x, H->Next->y, snakecolor);

				paintfood(foodcolor);
				if((H->Next->x >600) ||(H->Next->x < 52) || (H->Next->y>385) || (H->Next->y<55))
				{
					break;
				}
				Snake tempnode = H->Next->Next;
				while(tempnode != NULL) {
					if ((H->Next->x == tempnode->x)&(H->Next->y == tempnode->y)) {
						iseatself = 1;
						break;
					}
					tempnode = tempnode->Next;
				}

				if (iseatself) {
					break;
				}

				if((abs(H->Next->x - food.x) < 10)&(abs(H->Next->y - food.y) < 10))
				{
					eatfood();
					grade ++;
					getfood();
				}
				//
				for(i = 0; i < 50000 + 10000 * (-speed); i++);
			}

			StatusReg = XPs2_GetStatus(&Ps2Inst);
		}while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
		XPs2_Recv(&Ps2Inst, &RxBuffer, 1);


		if(RxBuffer == 0x3B) {
			if(direction != 0)
				direction = 1;
		}
		if (RxBuffer == 0x4B){
			if(direction != 1){
				direction = 0;
			}
		}
		if (RxBuffer == 0x43) {
			if (direction != 2){
				direction = 3;
			}
		}
		if (RxBuffer == 0x42){
			if (direction !=3) {
				direction = 2;
			}
		}
		if(stop == 0){
			if((RxBuffer == 0x1C)||(RxBuffer == 0x23)||
				(RxBuffer == 0x6B)||(RxBuffer == 0xE0)||
				(RxBuffer == 0x69) || (RxBuffer == 0x72) || (RxBuffer == 0x7A))
			{
				if(RxBuffer == 0x1C)
				{
					moveBall(1, 1);
				}
				if(RxBuffer == 0x23)
				{
					moveBall(1, 2);
				}
				if(RxBuffer == 0x6B)
				{
					moveBall(2, 1);
				}
				if(RxBuffer == 0xE0)
				{
					moveBall(2, 2);
				}
			}
		}
		if(RxBuffer == 0x55){
			speed++;
		}
		if(RxBuffer == 0x4E){
			speed--;
		}

		if(RxBuffer == 0x44){
			stop = 0;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'G');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'O');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, ' ');

		}
		if(RxBuffer == 0x4D){
			stop = 1;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'P');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'A');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, 'U');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, 'S');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, 'E');
		}
		if(RxBuffer == 0x76)
		{
			XTft_ClearScreen(&TftInstance);
			break;
		}
//		Delay(mode);
	}
	paintSnake(H, snakecolor);

	XTft_ClearScreen(&TftInstance);
}


//-----------------------------------init menu 2-------------------------------

void initMenu2()
{
	int StatusReg;
	int stop = 1;
	speed = 0;
	clearMenu();
	paintFrame();

	ball_red.x = (int)(leftBottomX + rightBottomX)/2;
	ball_red.y = leftBottomY - 10;
	ball_red.color = FGCOLOR_red;

	ball_blue.x = (int)(leftTopX + rightTopX)/2;
	ball_blue.y = leftTopY + 10;
	ball_blue.color = FGCOLOR_blu;

	boomboom.x = ball_red.x;
	boomboom.y = ball_red.y - 10;
	boomboom.color = 0x11;
	boomboom.direction = 1;

	paintBoom(boomboom.x, boomboom.y, boomboom.color);
	paintBall(ball_red.x, ball_red.y, ball_red.color);
	paintBall(ball_blue.x, ball_blue.y, ball_blue.color);

	XTft_SetPos(&TftInstance, 0,8);
	XTft_Write(&TftInstance, 'R');
	XTft_SetPos(&TftInstance, 15,8);
	XTft_Write(&TftInstance, 'E');
	XTft_SetPos(&TftInstance, 30,8);
	XTft_Write(&TftInstance, 'A');
	XTft_SetPos(&TftInstance, 45,8);
	XTft_Write(&TftInstance, 'D');
	XTft_SetPos(&TftInstance, 60,8);
	XTft_Write(&TftInstance, 'Y');

	int i;
	while (1) {
		do {
			if(stop == 0){
				moveBoom();
				for(i = 0; i < 50000 + 10000 * (-speed); i++);
			}

			StatusReg = XPs2_GetStatus(&Ps2Inst);
		}while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
		XPs2_Recv(&Ps2Inst, &RxBuffer, 1);
		printf("%x \r\n",RxBuffer);

		if(stop == 0){
			if((RxBuffer == 0x1C)||(RxBuffer == 0x23)||
					(RxBuffer == 0x6B)||(RxBuffer == 0xE0)||
					(RxBuffer == 0x69) || (RxBuffer == 0x72) || (RxBuffer == 0x7A))
			{
				if(RxBuffer == 0x1C)
				{
					moveBall(1, 1);
				}
				if(RxBuffer == 0x23)
				{
					moveBall(1, 2);
				}
				if(RxBuffer == 0x6B)
				{
					moveBall(2, 1);
				}
				if(RxBuffer == 0xE0)
				{
					moveBall(2, 2);
				}
			}
		}
		if(RxBuffer == 0x55){
			speed++;
		}
		if(RxBuffer == 0x4E){
			speed--;
		}

		if(RxBuffer == 0x44){
			stop = 0;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'G');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'O');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, ' ');

		}
		if(RxBuffer == 0x4D){
			stop = 1;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'P');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'A');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, 'U');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, 'S');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, 'E');
		}
		if(RxBuffer == 0x76)
		{
			XTft_ClearScreen(&TftInstance);
			break;
		}
	}
}

void paintBoom(int x, int y, char color)
{
	int i,j;
	for (i = x - 5;i < x + 5;i ++)
	for (j = y - 5;j < y + 5; j++)
		XTft_SetPixel(&TftInstance, i, j, color);
}

void paintBall(int x, int y, char color)
{
	int i,j;
	for (i = x - 25;i < x + 25;i ++)
	for (j = y - 5;j < y + 5; j++)
		XTft_SetPixel(&TftInstance, i, j, color);
}

void moveBall(int ball, int direction)
{
	int speed = 20;
	printf("\r\ndirection:%d",direction);
	if(direction != 0)
	{
		if(ball == 1)
		{
			paintBall(ball_red.x, ball_red.y, FGCOLOR_blk);
			if(direction == 1)	ball_red.x = ball_red.x - speed;
			if(direction == 2)	ball_red.x = ball_red.x + speed;
			paintBall(ball_red.x, ball_red.y, ball_red.color);
		}

		if(ball == 2)
		{
			if(ball_blue.x == leftTopX || ball_blue.x == rightTopX) return;
			paintBall(ball_blue.x, ball_blue.y, FGCOLOR_blk);
			if(direction == 1)	ball_blue.x = ball_blue.x - speed;
			if(direction == 2)	ball_blue.x = ball_blue.x + speed;
			paintBall(ball_blue.x, ball_blue.y, ball_blue.color);
		}
	}
	return;
}

void moveBoom()
{
	paintBall(boomboom.x, boomboom.y, FGCOLOR_blk);

	//left
	if(boomboom.x <= leftTopX + 30) {
		if(boomboom.direction == 3) boomboom.direction = 4;
		if(boomboom.direction == 2) boomboom.direction = 1;
	}
	//right
	if(boomboom.x >= rightTopX - 30) {
		if(boomboom.direction == 1) boomboom.direction = 2;
		if(boomboom.direction == 4) boomboom.direction = 3;
	}
	//top
	if(player == 1)
	{
		if(boomboom.y <= leftTopY + 20) {
			if(boomboom.direction == 2) boomboom.direction = 3;
			if(boomboom.direction == 1) boomboom.direction = 4;
			speed+=0.5;
		}
	}
	else
	{
		if(boomboom.y <= leftTopY + 20) {
			if(boomboom.x >= ball_blue.x - 28 && boomboom.x <= ball_blue.x + 28)
			{
				if(boomboom.direction == 2) boomboom.direction = 3;
				if(boomboom.direction == 1) boomboom.direction = 4;
				speed+=0.5;

			}
			else
			{

				XTft_ClearScreen(&TftInstance);
				if(player == 1)initMenu1();
				if(player == 2){
					displayRedWin();
					initMenu2();
				}
				if(player == 3){
					initMenu3();
				}
				paintFrame();
			}
		}
	}

	//bottom
	if(boomboom.y >= rightBottomY - 20) {
		if(boomboom.x >= ball_red.x - 28 && boomboom.x <= ball_red.x + 28)
		{
			if(boomboom.direction == 4) boomboom.direction = 1;
			if(boomboom.direction == 3) boomboom.direction = 2;
			speed+=0.5;

		}
		else
		{
			displayBlueWin();
			XTft_ClearScreen(&TftInstance);
			if(player == 1)initMenu1();
			if(player == 2){
				displayRedWin();
				initMenu2();
			}
			if(player == 3){
				initMenu3();
			}
			paintFrame();
		}
	}

	int speed = 5;

	switch(boomboom.direction)
	{
		case 1:
			boomboom.x = boomboom.x + speed;
			boomboom.y = boomboom.y - speed;
			paintBoom(boomboom.x, boomboom.y, boomboom.color);
			break;

		case 2:
			boomboom.x = boomboom.x - speed;
			boomboom.y = boomboom.y - speed;
			paintBoom(boomboom.x, boomboom.y, boomboom.color);
			break;


		case 3:
			boomboom.x = boomboom.x - speed;
			boomboom.y = boomboom.y + speed;
			paintBoom(boomboom.x, boomboom.y, boomboom.color);
			break;


		case 4:
			boomboom.x = boomboom.x + speed;
			boomboom.y = boomboom.y + speed;
			paintBoom(boomboom.x, boomboom.y, boomboom.color);
			break;

		default:
			printf("no");
	}
}

//-----------------------------------init menu 1-------------------------------
void initMenu1()
{
	int StatusReg;
	int stop = 1;
	speed = 0;
	clearMenu();
	paintFrame();

	stop = 1;
	ball_red.x = (int)(leftBottomX + rightBottomX)/2;
	ball_red.y = leftBottomY - 10;
	ball_red.color = FGCOLOR_red;

	ball_blue.x = (int)(leftTopX + rightTopX)/2;
	ball_blue.y = leftTopY + 10;
	ball_blue.color = FGCOLOR_blk;

	boomboom.x = ball_red.x;
	boomboom.y = ball_red.y - 10;
	boomboom.color = 0x11;
	boomboom.direction = 1;

	paintBoom(boomboom.x, boomboom.y, boomboom.color);
	paintBall(ball_red.x, ball_red.y, ball_red.color);
	paintBall(ball_blue.x, ball_blue.y, ball_blue.color);

	XTft_SetPos(&TftInstance, 0,8);
	XTft_Write(&TftInstance, 'R');
	XTft_SetPos(&TftInstance, 15,8);
	XTft_Write(&TftInstance, 'E');
	XTft_SetPos(&TftInstance, 30,8);
	XTft_Write(&TftInstance, 'A');
	XTft_SetPos(&TftInstance, 45,8);
	XTft_Write(&TftInstance, 'D');
	XTft_SetPos(&TftInstance, 60,8);
	XTft_Write(&TftInstance, 'Y');

	int i;
	while (1) {
		do {
			if(stop == 0){
				moveBoom();
				for(i = 0; i < 50000 + 10000 * (-speed); i++);
			}

			StatusReg = XPs2_GetStatus(&Ps2Inst);
		}while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
		XPs2_Recv(&Ps2Inst, &RxBuffer, 1);
		printf("%x \r\n",RxBuffer);

		if(stop == 0){
			if((RxBuffer == 0x1C)||(RxBuffer == 0x23)||
					(RxBuffer == 0x6B)||(RxBuffer == 0xE0)||
					(RxBuffer == 0x69) || (RxBuffer == 0x72) || (RxBuffer == 0x7A))
			{
				if(RxBuffer == 0x1C)
				{
					moveBall(1, 1);
				}
				if(RxBuffer == 0x23)
				{
					moveBall(1, 2);
				}
				if(RxBuffer == 0x6B)
				{
					moveBall(2, 1);
				}
				if(RxBuffer == 0xE0)
				{
					moveBall(2, 2);
				}
			}
		}
		if(RxBuffer == 0x55){
			speed++;
		}
		if(RxBuffer == 0x4E){
			speed--;
		}

		if(RxBuffer == 0x44){
			stop = 0;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'G');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'O');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, ' ');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, ' ');

		}
		if(RxBuffer == 0x4D){
			stop = 1;
			XTft_SetPos(&TftInstance, 0,8);
			XTft_Write(&TftInstance, 'P');
			XTft_SetPos(&TftInstance, 15,8);
			XTft_Write(&TftInstance, 'A');
			XTft_SetPos(&TftInstance, 30,8);
			XTft_Write(&TftInstance, 'U');
			XTft_SetPos(&TftInstance, 45,8);
			XTft_Write(&TftInstance, 'S');
			XTft_SetPos(&TftInstance, 60,8);
			XTft_Write(&TftInstance, 'E');
		}
		if(RxBuffer == 0x76)
		{
			XTft_ClearScreen(&TftInstance);
			break;
		}
	}
}

//-----------------------------------choose menu-------------------------------
void chooseMenu()
{
	u32 StatusReg;
	while (1) {
		do {
			StatusReg = XPs2_GetStatus(&Ps2Inst);
		}while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
		XPs2_Recv(&Ps2Inst, &RxBuffer, 1);
		printf("%x \r\n",RxBuffer);

		if(RxBuffer == 0x69)
		{
			player = 1;
			initMenu1();
			break;
		}
		if(RxBuffer == 0x72)
		{
			player = 2;
			initMenu2();
			break;
		}
		if(RxBuffer == 0x7A)
		{
			player = 2;
			initMenu3();
			break;
		}
	}
}


//-----------------------------------display menu-------------------------------

void displayMenu()
{
	int i;
	int beginning = -50;
	int positionY = -100;
	char choose_1[10] = {'1','.','P','r','a','c','t','i','c','e'};
	char choose_2[12] = {'2','.','E','a','s','y',' ','F','i','g','h','t'};
	char choose_3[13] = {'3','.','C','r','a','z','y',' ','s','n','a','k','e'};
	for(i = 0; i < 10; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY);
		XTft_Write(&TftInstance, choose_1[i]);
	}

	for(i = 0; i < 12; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY + 20);
		XTft_Write(&TftInstance, choose_2[i]);
	}

	for(i = 0; i < 13; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY + 40);
		XTft_Write(&TftInstance, choose_3[i]);
	}

	chooseMenu();
}

void clearMenu()
{
	int i;
	int beginning = -50;
	int positionY = -100;
	char choose_1[10] = {'1','.','P','r','a','c','t','i','c','e'};
	char choose_2[12] = {'2','.','E','a','s','y',' ','F','i','g','h','t'};
	char choose_3[13] = {'3','.','C','r','a','z','y',' ','s','n','a','k','e'};

	for(i = 0; i < 10; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY);
		XTft_Write(&TftInstance, ' ');
	}

	for(i = 0; i < 12; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY + 20);
		XTft_Write(&TftInstance, ' ');
	}

	for(i = 0; i < 13; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 10 * i,
					(int)(leftTopY + leftBottomY)/2 + positionY + 40);
		XTft_Write(&TftInstance, ' ');
	}
}

//-----------------------------------display game-------------------------------

void displayGameBegin()
{
	int beginning = -75;
	char name[12] = {'T', 'a', 'b', 'l', 'e', ' ', 'H', 'o', 'c', 'k', 'e', 'y'};

	int i;
	for(i = 0; i < 12; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 15 * i,
					(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, name[i]);
	}

	for(i = 0; i < 40000000; i++);

	for(i = 0; i < 12; i++)
	{
		XTft_SetPos(&TftInstance,
					(int)(leftTopX + rightTopX)/2 + beginning + 15 * i,
					(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, '  ');
	}
}

void paintNode(int x, int y, char color){
	int i,j;
	for (i = x - 5;i < x + 5; i++)
	for (j = y - 5;j < y + 5; j++)
		XTft_SetPixel(&TftInstance, i, j, color);
}

void paintFrame() {
	int i;

	for(i = leftTopX;i < rightTopX;i+=10){
		paintNode(i,leftTopY, FGCOLOR_grn);
	}
	for(i = leftBottomX;i < rightBottomX;i+=10){
		paintNode(i,rightBottomY ,FGCOLOR_grn);
	}
	for(i = leftTopY;i < leftBottomY;i+=10){
		paintNode(leftTopX,i,FGCOLOR_grn);
	}
	for(i = rightTopY;i < rightBottomY;i+=10){
		paintNode(rightBottomX,i,FGCOLOR_grn);
	}
}

//-----------------------------------display Winner-----------------------------

void displayRedWin()
{
	int i;
	for( i = 0; i < 3; i++)
	{
		//light
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'G');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'A');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'M');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'O');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'V');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'R');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, '!');

		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'R');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'D');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'W');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'I');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'N');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, '!');

		Delay(300);

		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');

		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');

		Delay(300);

	}
}

void displayBlueWin()
{
	int i;
	for(i = 0; i < 3; i++)
	{
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'G');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'A');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'M');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'O');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'V');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, 'R');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 75,
				(int)(leftTopY + leftBottomY)/2 - 20);
		XTft_Write(&TftInstance, '!');

		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 75,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'B');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'L');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'U');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 - 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'E');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, ' ');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 15,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'W');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 30,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'I');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 45,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, 'N');
		XTft_SetPos(&TftInstance,
				(int)(leftTopX + rightTopX)/2 + 60,
				(int)(leftTopY + leftBottomY)/2 + 20);
		XTft_Write(&TftInstance, '!');

		Delay(300);

		XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 75,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 60,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 45,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 30,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 15,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 15,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 30,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 45,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 60,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 75,
						(int)(leftTopY + leftBottomY)/2 - 20);
				XTft_Write(&TftInstance, ' ');

				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 75,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 60,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 45,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 30,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 - 15,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 15,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 30,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 45,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');
				XTft_SetPos(&TftInstance,
						(int)(leftTopX + rightTopX)/2 + 60,
						(int)(leftTopY + leftBottomY)/2 + 20);
				XTft_Write(&TftInstance, ' ');

				Delay(300);
	}
}


//-------------------snake.c---------------------

