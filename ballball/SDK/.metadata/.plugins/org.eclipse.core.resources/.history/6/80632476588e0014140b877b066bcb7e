/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

//#include "xtft.h"
#include "xparameters.h"
#include "automan.h"
#include "malloc.h"
#include"xil_io.h"
#define TFT_FRAME_ADDR0  XPAR_EMC_0_MEM0_HIGHADDR-0X001FFFFF



int main()
{
    int i,j,*color;
    char *tmp;
    tmp=malloc(4);
    color=tmp;
    Xil_Out32(XPAR_TFT_0_BASEADDR+XTFT_AR_OFFSET,TFT_FRAME_ADDR0);
    for(i=0;i<=120;i++){
    	for(j=0;j<=640;j++){
    		Xil_Out32(TFT_FRAME_ADDR0+(4*((i)*XTFT_DISPLAY_BUFFER_WIDTH+j)),0x0);
    	}
 }

    for(i=0;i<=22;i++){
        	for(j=0;j<=120;j++){
        		tmp[0]=gImage_automan[i*120+j];
        		tmp[3]=(gImage_automan[i*120+j]&0x3)<<4;
        		tmp[2]=(gImage_automan[i*120+j]&0x1c)<1;
        		tmp[1]=(gImage_automan[i*120+j]&0xe0)>>2;
        		Xil_Out32(TFT_FRAME_ADDR0+(4*((i)*XTFT_DISPLAY_BUFFER_WIDTH+j)),*color);
        	}
    }


    return 1;
}
